// Script to test all functions and models 
// of FluidDissipation Library in
// Dymola
// 
// Generated by Stefan Wischhusen
// 21-05-2012
// last change: 07-09-2016
// Stefan Wischhusen
// XRG Simulation GmbH

success = openModel("../../package.mo");

cd("Extras/Scripts/.");

cd("./heatTransfer/channel");

@kc_evenGapLaminar.mos
@kc_evenGapLaminar_KC.mos
@kc_evenGapOverall.mos
@kc_evenGapOverall_KC.mos
@kc_evenGapTurbulent.mos
@kc_evenGapTurbulent_KC.mos
cd("../general/.");
@kc_approxForcedConvection.mos
@kc_approxForcedConvection_KC.mos
cd("../heatExchanger/.");
@kc_FilmCondensationTubeBundle.mos
@kc_FilmCondensationTubeBundle_KC.mos
@kc_flatTube.mos
@kc_flatTube_KC.mos
@kc_roundTube.mos
@kc_roundTube_KC.mos
@kc_tubeBundle_1ph.mos
@kc_tubeBundle_1ph_KC.mos
cd("../helicalPipe/.");
@kc_laminar.mos
@kc_laminar_KC.mos
@kc_overall.mos
@kc_overall_KC.mos
@kc_turbulent.mos
@kc_turbulent_KC.mos
cd("../plate/.");
@kc_laminar.mos
@kc_laminar_KC.mos
@kc_overall.mos
@kc_overall_KC.mos
@kc_turbulent.mos
@kc_turbulent_KC.mos
cd("../straightPipe/.");
@kc_laminar.mos
@kc_laminar_KC.mos
@kc_overall.mos
@kc_overall_KC.mos
@kc_turbulent.mos
@kc_turbulent_KC.mos
@kc_twoPhaseOverall_KC.mos
@kc_twoPhase_boilingConvective_KC.mos
cd("../../pressureLoss/bend/.");
@dp_curvedOverall.mos
@dp_curvedOverall_DPMFLOW.mos
@dp_edgedOverall.mos
@dp_edgedOverall_DPMFLOW.mos
cd("../channel/.");
@dp_internalFlowOverall.mos
@dp_internalFlowOverall_DPMFLOW.mos
cd("../diffuser/.");
@dp_conicalOverall_DPMFLOW.mos
cd("../general/.");
@dp_idealGas.mos
@dp_idealGas_DPMFLOW.mos
@dp_nominalDensityViscosity.mos
@dp_nominalDensityViscosity_DPMFLOw.mos
@dp_nominalPressureLossLawDensity.mos
@dp_nominalPressureLossLawDensity_DPMFLOW.mos
@dp_pressureLossCoefficient.mos
@dp_pressureLossCoefficient_DPMFLOW.mos
@dp_volumeFlowRate.mos
@dp_volumeFlowRate_DPMFLOW.mos
cd("../heatExchanger/.");
@dp_corrugatedPlate_1ph_DP.mos
@dp_flatTube_DP.mos
@dp_roundTube_DP.mos
cd("../junction/.");
@dp_Tjoin.mos
@dp_Tjoin_symmetric.mos
@dp_Tjunction.mos
@dp_Tsplit.mos
@dp_Tsplit_symmetric.mos
cd("../nozzle/.");
@dp_conicalOverall_DPMFLOW.mos
cd("../orifice/.");
@dp_suddenChange.mos
@dp_suddenChange_DPMFLOW.mos
@dp_thickEdgedOverall.mos
@dp_thickEdgedOverall_DPMFLOW.mos
cd("../straightPipe/.");
@dp_laminar.mos
@dp_laminar_DPMFLOW.mos
@dp_overall.mos
@dp_overall_DPMFLOW.mos
@dp_turbulent.mos
@dp_turbulent_DPMFLOW.mos
@dp_twoPhaseOverall_DP.mos
cd("../valve/.");
@dp_severalGeometryOverall_DPMFLOW.mos
cd("../../.");
simulateModel("FluidDissipation.Examples.TestCases.EngineFeedingSystem");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.Channel");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.General");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.HeatExchanger");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.HeatExchanger_TwoPhase");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.HeatExchanger_TubeBundle");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.HelicalPipe");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.Plate");
simulateModel("FluidDissipation.Examples.TestCases.HeatTransfer.StraightPipe");

simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Bend");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.EdgedBend");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Channel");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Diffuser");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.General");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.HeatExchanger");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Join_Right");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Join_symmetric");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Nozzle");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Orifice");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.SeveralTestCases");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Split_Right");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Split_symmetric");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.StraightPipe");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.Valve");
simulateModel("FluidDissipation.Examples.TestCases.PressureLoss.SuddenChange");

messageDialog(message=" Checked FluidDissipation successful!", timeOut=1e300);








